/**
 * AI Research Module - Frontend JavaScript Controller (FIXED NAMING CONFLICTS)
 * Enhanced for proper FlowWork integration without conflicts
 * 
 * @version 1.0.4
 * @author FlowWork Team
 */

// ‚úÖ Prevent multiple loading
(function() {
    'use strict';
    
    // Check if already loaded
    if (window.aiResearchLoaded) {
        console.warn('‚ö†Ô∏è AI Research script already loaded, skipping...');
        return;
    }
    
    // Mark as loading
    window.aiResearchLoaded = true;
    
    class AIResearchModuleCore {
        constructor() {
            this.name = 'AI Research';
            this.version = '1.0.4';
            this.moduleId = 'ai-research';
            this.instanceName = 'AIResearch';
            
            // Prevent multiple initialization
            if (window[this.instanceName] && window[this.instanceName].initialized) {
                console.warn('üß† AI Research already initialized');
                return window[this.instanceName];
            }
            
            // Initialize properties
            this.currentPersona = 'general';
            this.currentModel = 'auto';
            this.isProcessing = false;
            this.currentQuery = '';
            this.lastResult = null;
            this.container = null;
            this.initialized = false;
            
            this.initializeConfig();
            this.setupPersonas();
            this.setupAIModels();
            
            console.log('üß† AI Research Module Core initialized (v1.0.4 - FIXED)');
        }
        
        /**
         * Initialize configuration and detect environment
         */
        initializeConfig() {
            try {
                if (typeof window !== 'undefined' && window.FlowWorkConfig && Array.isArray(window.FlowWorkConfig.modules)) {
                    this.isStandalone = false;
                    console.log('üß† AI Research: Running in FlowWork environment');
                } else {
                    this.isStandalone = true;
                    console.log('üß† AI Research: Running in standalone mode');
                }
            } catch (error) {
                this.isStandalone = true;
                console.warn('üß† AI Research: Config detection failed, using standalone mode');
            }
        }
        
        /**
         * Setup Personas Configuration
         */
        setupPersonas() {
            this.personas = {
                student: {
                    name: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
                    icon: 'üéì',
                    description: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏≠‡∏ö',
                    color: 'blue'
                },
                business: {
                    name: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', 
                    icon: 'üíº',
                    description: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î ‡πÅ‡∏ú‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£',
                    color: 'purple'
                },
                government: {
                    name: '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£',
                    icon: 'üèõÔ∏è', 
                    description: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£ ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£',
                    color: 'green'
                },
                researcher: {
                    name: '‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏à‡∏±‡∏¢',
                    icon: 'üî¨',
                    description: '‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£ ‡∏Å‡∏≤‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏ß‡∏£‡∏£‡∏ì‡∏Å‡∏£‡∏£‡∏° ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                    color: 'indigo'
                },
                general: {
                    name: '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
                    icon: 'üë•',
                    description: '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
                    color: 'gray'
                },
                organization: {
                    name: '‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£/SME',
                    icon: 'üè¢',
                    description: '‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
                    color: 'orange'
                }
            };
        }
        
        /**
         * Setup AI Models Configuration
         */
        setupAIModels() {
            this.aiModels = {
                auto: { name: 'Auto Select', cost: '5-8', icon: 'üéØ', description: '‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥' },
               'gpt-4': { name: 'GPT-4', cost: '8', icon: 'üß†', description: '‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏∂‡∏Å' },
               claude: { name: 'Claude', cost: '5', icon: 'ü§ñ', description: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏¢‡∏≤‡∏ß' },
               gemini: { name: 'Gemini', cost: '2', icon: 'üíé', description: '‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î ‡πÄ‡∏£‡πá‡∏ß' }
           };
        }
        
        /**
         * Initialize Module
         */
        init() {
            try {
                if (this.initialized) {
                    console.log('üß† AI Research: Already initialized');
                    return true;
                }
                
                this.bindEvents();
                this.setupEventListeners();
                
                this.initialized = true;
                console.log('‚úÖ AI Research Module initialized successfully');
                return true;
            } catch (error) {
                console.error('‚ùå AI Research Module initialization failed:', error);
                return false;
            }
        }
        
        /**
         * Render Module Interface
         */
        render(container) {
            try {
                if (!container) {
                    console.error('‚ùå No container provided for AI Research');
                    return false;
                }
                
                console.log('üé® Rendering AI Research Module...');
                
                this.container = container;
                container.innerHTML = this.getFullInterface();
                
                // Initialize interface after DOM is ready
                setTimeout(() => {
                    this.initializeInterface();
                }, 100);
                
                console.log('‚úÖ AI Research interface rendered successfully');
                return true;
                
            } catch (error) {
                console.error('‚ùå AI Research render error:', error);
                if (container) {
                    container.innerHTML = this.getErrorTemplate(error.message);
                }
                return false;
            }
        }
        
        /**
         * Get Full Interface HTML
         */
        getFullInterface() {
            return `
                <div id="aiResearchModule" class="ai-research-module">
                    
                    <!-- Module Header -->
                    <div class="module-header">
                        <div class="header-left">
                            <button class="back-button" onclick="FlowWork.loadModule('dashboard')">
                                <i class="fas fa-arrow-left"></i>
                            </button>
                            <div class="module-title">
                                <h1><i class="fas fa-brain"></i> AI Research Assistant</h1>
                                <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÅ‡∏ö‡∏ö Multi-provider (FIXED VERSION)</p>
                            </div>
                        </div>
                        <div class="header-right">
                            <div class="credits-display">
                                <i class="fas fa-coins"></i>
                                <span id="userCredits">1,246</span>
                                <small>credits</small>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Research Form -->
                    <div class="research-form-container">
                        <div class="research-form">
                            
                            <!-- Success Message -->
                            <div style="background: var(--green-50); border: 1px solid var(--green-200); border-radius: 12px; padding: 16px; margin-bottom: 24px;">
                                <h4 style="color: var(--green-800); margin-bottom: 8px; display: flex; align-items: center; gap: 8px;">
                                    <i class="fas fa-check-circle"></i> ‚úÖ Module Loading Fixed!
                                </h4>
                                <p style="color: var(--green-700); margin: 0; font-size: 14px;">
                                    Naming conflicts resolved. AI Research Module is now working properly.
                                </p>
                            </div>
                            
                            <!-- Persona Selection -->
                            <div class="form-section">
                                <label class="section-label">
                                    <i class="fas fa-user-circle"></i>
                                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Persona (‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
                                </label>
                                <div class="persona-grid" id="personaGrid">
                                    <!-- Personas will be loaded by JavaScript -->
                                </div>
                            </div>
                            
                            <!-- AI Model Selection -->
                            <div class="form-section">
                                <label class="section-label">
                                    <i class="fas fa-robot"></i>
                                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å AI Model
                                </label>
                                <div class="ai-model-selector">
                                    <div class="model-option active" data-model="auto">
                                        <div class="model-icon">üéØ</div>
                                        <div class="model-info">
                                            <h4>Auto Select</h4>
                                            <p>‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
                                            <span class="cost">~5-8 credits</span>
                                        </div>
                                    </div>
                                    <div class="model-option" data-model="gpt-4">
                                        <div class="model-icon">üß†</div>
                                        <div class="model-info">
                                            <h4>GPT-4</h4>
                                            <p>‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏∂‡∏Å</p>
                                            <span class="cost">8 credits</span>
                                        </div>
                                    </div>
                                    <div class="model-option" data-model="claude">
                                        <div class="model-icon">ü§ñ</div>
                                        <div class="model-info">
                                            <h4>Claude</h4>
                                            <p>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏¢‡∏≤‡∏ß</p>
                                            <span class="cost">5 credits</span>
                                        </div>
                                    </div>
                                    <div class="model-option" data-model="gemini">
                                        <div class="model-icon">üíé</div>
                                        <div class="model-info">
                                            <h4>Gemini</h4>
                                            <p>‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î ‡πÄ‡∏£‡πá‡∏ß</p>
                                            <span class="cost">2 credits</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Query Input -->
                            <div class="form-section">
                                <label class="section-label">
                                    <i class="fas fa-search"></i>
                                    ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢
                                </label>
                                <div class="query-input-container">
                                    <textarea 
                                        id="researchQuery" 
                                        class="query-input"
                                        placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô Cryptocurrency ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ 2025"
                                        rows="4"
                                        maxlength="10000"></textarea>
                                    <div class="input-footer">
                                        <span class="char-count">0/10,000</span>
                                        <div class="quick-suggestions">
                                            <button type="button" class="suggestion-btn" onclick="window.AIResearch.useSuggestion('‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢ 2025')">
                                                üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô
                                            </button>
                                            <button type="button" class="suggestion-btn" onclick="window.AIResearch.useSuggestion('‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SME')">
                                                üíº ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î
                                            </button>
                                            <button type="button" class="suggestion-btn" onclick="window.AIResearch.useSuggestion('‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI ‡πÉ‡∏ô‡∏õ‡∏µ 2025')">
                                                ü§ñ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Advanced Options -->
                            <div class="form-section">
                                <button class="advanced-toggle" onclick="window.AIResearch.toggleAdvancedOptions()">
                                    <i class="fas fa-cog"></i>
                                    ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
                                    <i class="fas fa-chevron-down toggle-icon"></i>
                                </button>
                                <div id="advancedOptions" class="advanced-options">
                                    <div class="option-row">
                                        <label>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢:</label>
                                        <div class="depth-slider">
                                            <input type="range" id="researchDepth" min="1" max="5" value="3">
                                            <div class="depth-labels">
                                                <span>‡πÄ‡∏£‡πá‡∏ß</span>
                                                <span>‡∏õ‡∏Å‡∏ï‡∏¥</span>
                                                <span>‡∏•‡∏∂‡∏Å</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="option-row">
                                        <label>‡∏†‡∏≤‡∏©‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</label>
                                        <select id="outputLanguage">
                                            <option value="thai">‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢</option>
                                            <option value="english">English</option>
                                            <option value="both">‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤</option>
                                        </select>
                                    </div>
                                    <div class="option-row">
                                        <label>‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:</label>
                                        <div class="source-checkboxes">
                                            <label><input type="checkbox" checked> ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (.go.th)</label>
                                            <label><input type="checkbox" checked> ‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£ (.ac.th)</label>
                                            <label><input type="checkbox" checked> ‡∏™‡∏∑‡πà‡∏≠‡∏Ç‡πà‡∏≤‡∏ß</label>
                                            <label><input type="checkbox"> Social Media</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Action Buttons -->
                            <div class="form-actions">
                                <div class="cost-estimate">
                                    <span class="estimate-label">‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:</span>
                                    <span id="costEstimate" class="estimate-value">5-8 credits</span>
                                </div>
                                <button type="button" id="startResearchBtn" class="start-research-btn" onclick="window.AIResearch.startResearch()">
                                    <i class="fas fa-rocket"></i>
                                    ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI (DEMO)
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Research Progress -->
                    <div id="researchProgress" class="research-progress" style="display: none;">
                        <div class="progress-header">
                            <h3><i class="fas fa-cog fa-spin"></i> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI...</h3>
                            <button class="cancel-btn" onclick="window.AIResearch.cancelResearch()">
                                <i class="fas fa-times"></i> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                            </button>
                        </div>
                        
                        <div class="progress-steps">
                            <div class="step active">
                                <i class="fas fa-search"></i>
                                <span>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
                            </div>
                            <div class="step">
                                <i class="fas fa-robot"></i>
                                <span>‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ AI</span>
                            </div>
                            <div class="step">
                                <i class="fas fa-check-circle"></i>
                                <span>‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</span>
                            </div>
                        </div>
                        
                        <div class="progress-details">
                            <div class="progress-bar">
                                <div id="progressFill" class="progress-fill"></div>
                            </div>
                            <div id="progressText" class="progress-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
                            
                            <div class="sources-found">
                                <h4>‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö:</h4>
                                <div id="sourcesList" class="sources-list">
                                    <!-- Sources will be added dynamically -->
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Research Results -->
                    <div id="researchResults" class="research-results" style="display: none;">
                        <div class="results-header">
                            <div class="results-info">
                                <h3 id="resultsTitle">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢ (DEMO)</h3>
                                <div class="results-meta">
                                    <span id="resultsCost">‡πÉ‡∏ä‡πâ 8 credits</span>
                                    <span id="resultsDuration">‡πÄ‡∏ß‡∏•‡∏≤ 2.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>
                                    <span id="resultsModel">GPT-4</span>
                                </div>
                            </div>
                            <div class="results-actions">
                                <button class="btn-secondary" onclick="window.AIResearch.shareWithTeam()">
                                    <i class="fas fa-users"></i> ‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°
                                </button>
                                <button class="btn-primary" onclick="window.AIResearch.exportResults()">
                                    <i class="fas fa-download"></i> ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
                                </button>
                                <button class="btn-secondary" onclick="window.AIResearch.newResearch()">
                                    <i class="fas fa-plus"></i> ‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÉ‡∏´‡∏°‡πà
                                </button>
                            </div>
                        </div>
                        
                        <div class="results-content">
                            <div id="resultsText" class="results-text">
                                <!-- AI generated content will be displayed here -->
                            </div>
                        </div>
                        
                        <div class="results-footer">
                            <div class="sources-section">
                                <h4>‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:</h4>
                                <div id="resultsSources" class="sources-grid">
                                    <!-- Sources will be displayed here -->
                                </div>
                            </div>
                        </div>
                    </div>
                    
                </div>
            `;
        }
        
        /**
         * Initialize Interface after rendering
         */
        initializeInterface() {
            try {
                console.log('üîÑ Initializing AI Research interface...');
                
                this.loadPersonas();
                this.attachEventHandlers();
                this.updateUI();
                
                this.showNotification('üß† AI Research Module ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô! (FIXED)', 'success');
                
                console.log('‚úÖ AI Research interface initialized successfully');
                
            } catch (error) {
                console.error('‚ùå Interface initialization failed:', error);
                this.showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Interface', 'error');
            }
        }
        
        /**
         * Load Personas into UI
         */
        loadPersonas() {
            const personaGrid = document.getElementById('personaGrid');
            if (!personaGrid) {
                console.warn('‚ö†Ô∏è Persona grid not found');
                return;
            }
            
            let html = '';
            Object.entries(this.personas).forEach(([key, persona]) => {
                const isActive = key === this.currentPersona ? 'active' : '';
                html += `
                    <div class="persona-card ${isActive}" data-persona="${key}" onclick="window.AIResearch.selectPersona('${key}')">
                        <div class="persona-icon">${persona.icon}</div>
                        <div class="persona-name">${persona.name}</div>
                        <div class="persona-description">${persona.description}</div>
                    </div>
                `;
            });
            
            personaGrid.innerHTML = html;
            console.log('‚úÖ Personas loaded successfully');
        }
        
        /**
         * Select Persona
         */
        selectPersona(personaKey) {
            if (!this.personas[personaKey]) {
                console.error('‚ùå Invalid persona:', personaKey);
                return;
            }
            
            this.currentPersona = personaKey;
            
            // Update UI
            document.querySelectorAll('.persona-card').forEach(card => {
                card.classList.remove('active');
            });
            
            const selectedCard = document.querySelector(`[data-persona="${personaKey}"]`);
            if (selectedCard) {
                selectedCard.classList.add('active');
            }
            
            this.updateCostEstimate();
            
            const persona = this.personas[personaKey];
            this.showNotification(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Persona: ${persona.name}`, 'success');
            
            console.log(`üé≠ Persona selected: ${personaKey}`);
        }
        
        /**
         * Select AI Model
         */
        selectAIModel(modelKey) {
            if (!this.aiModels[modelKey]) {
                console.error('‚ùå Invalid model:', modelKey);
                return;
            }
            
            this.currentModel = modelKey;
            this.updateModelSelection();
            this.updateCostEstimate();
            
            const model = this.aiModels[modelKey];
            this.showNotification(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å AI Model: ${model.name}`, 'info');
            
            console.log(`ü§ñ AI Model selected: ${modelKey}`);
        }
        
        /**
         * Update Model Selection UI
         */
        updateModelSelection() {
            document.querySelectorAll('.model-option').forEach(option => {
                option.classList.remove('active');
            });
            
            const selectedOption = document.querySelector(`[data-model="${this.currentModel}"]`);
            if (selectedOption) {
                selectedOption.classList.add('active');
            }
        }
        
        /**
         * Update Cost Estimate
         */
        updateCostEstimate() {
            const costElement = document.getElementById('costEstimate');
            if (!costElement) return;
            
            const model = this.aiModels[this.currentModel];
            costElement.textContent = `${model.cost} credits`;
        }
        
        /**
         * Toggle Advanced Options
         */
        toggleAdvancedOptions() {
            const toggle = document.querySelector('.advanced-toggle');
            const options = document.getElementById('advancedOptions');
            
            if (options && toggle) {
                const isOpen = options.classList.contains('open');
                if (isOpen) {
                    options.classList.remove('open');
                    toggle.classList.remove('open');
                    options.style.display = 'none';
                } else {
                    options.classList.add('open');
                    toggle.classList.add('open');
                    options.style.display = 'block';
                }
                
                console.log(`üîß Advanced options ${isOpen ? 'closed' : 'opened'}`);
            }
        }
        
        /**
         * Use Suggestion
         */
        useSuggestion(suggestion) {
            const queryInput = document.getElementById('researchQuery');
            if (queryInput) {
                queryInput.value = suggestion;
                queryInput.focus();
                
                // Update character count
                const charCount = document.querySelector('.char-count');
                if (charCount) {
                    charCount.textContent = `${suggestion.length}/10,000`;
                }
            }
            
            this.showNotification('‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ' + suggestion.substring(0, 50) + '...', 'info');
            console.log('üí° Suggestion used:', suggestion);
        }
        
        /**
         * Start Research - DEMO VERSION
         */
        async startResearch() {
            const query = document.getElementById('researchQuery')?.value?.trim();
            
            if (!query) {
                this.showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢', 'warning');
                return;
            }
            
            if (this.isProcessing) {
                this.showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà', 'info');
                return;
            }
            
            this.currentQuery = query;
            this.isProcessing = true;
            
            console.log('üöÄ Starting AI research (DEMO):', query);
            
            // Hide form, show progress
            this.showProgress();
            
            try {
                // Simulate AI processing
                await this.processResearch(query);
                
                // Show results
                this.showResults();
                
                console.log('‚úÖ Research completed successfully (DEMO)');
                
            } catch (error) {
                console.error('‚ùå Research failed:', error);
                this.showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'error');
                this.hideProgress();
            } finally {
                this.isProcessing = false;
            }
        }
        
        /**
         * Process Research - DEMO VERSION
         */
        async processResearch(query) {
            const persona = this.personas[this.currentPersona];
            const model = this.aiModels[this.currentModel];
            
            console.log(`üîÑ Processing research with ${model.name} for ${persona.name} (DEMO)`);
            
            // Simulate progress steps
            await this.simulateProgress([
                { step: 1, text: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...', duration: 1200 },
                { step: 2, text: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ ${model.name}...`, duration: 1800 },
                { step: 3, text: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...', duration: 1000 }
            ]);
            
            // Generate comprehensive mock result
            this.lastResult = {
                query: query,
                persona: persona.name,
                model: model.name,
                cost: parseInt(model.cost.split('-')[0]) || parseInt(model.cost),
                duration: '2.8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
                content: this.generateMockResult(query, persona, model),
                sources: this.generateMockSources(),
                timestamp: new Date()
            };
            
            // Update credits
            this.updateCredits(this.lastResult.cost);
        }
        
        /**
         * Generate Mock Result
         */
        generateMockResult(query, persona, model) {
            const timestamp = new Date().toLocaleString('th-TH');
            
            return `# üß† ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢ AI: ${query}
 
 **üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢ (DEMO MODE)**
 - üé≠ **Persona**: ${persona.name} 
 - ü§ñ **AI Model**: ${model.name}
 - ‚è±Ô∏è **‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•**: ${this.lastResult?.duration || '2.8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ'}
 - üí∞ **‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢**: ${this.lastResult?.cost || 5} credits
 - üìÖ **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà**: ${timestamp}
 
 ---
 
 ## üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
 
 ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢ **${model.name}** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö **${persona.name}** ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "${query}" ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
 
 ### üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏•‡∏±‡∏Å
 
 ‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ ‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
 
 **‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏û‡∏ö:**
 1. **‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô** - ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
 2. **‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç** - ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏ö  
 3. **‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢** - ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç
 
 ### üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å
 
 **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${persona.name}:**
 - ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
 - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏î‡πâ‡∏≤‡∏ô
 - ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
 
 ### üí° ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞
 
 1. **‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô** - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
 2. **‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏•‡∏≤‡∏á** - ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
 3. **‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß** - ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
 
 ### üîó ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
 
 - ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à)
 - ‡∏´‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤)
 - ‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå (‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤) 
 - ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥)
 - ‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥
 
 ---
 
 **‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î**: ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Demo ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö AI ‡πÅ‡∏•‡∏∞‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ
 
 **ü§ñ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÇ‡∏î‡∏¢**: ${model.name} | **üé≠ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö**: ${persona.name}  
 **üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô**: ‡∏™‡∏π‡∏á | **üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞**: Demo Mode (FIXED)
 **‚úÖ Status**: No naming conflicts`;
        }
        
        /**
         * Generate Mock Sources
         */
        generateMockSources() {
            return [
                { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢', url: 'https://www.bot.or.th', trust: 'high' },
                { name: '‡∏´‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡πÑ‡∏ó‡∏¢', url: 'https://www.thaichamber.org', trust: 'high' },
                { name: '‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå', url: 'https://www.moc.go.th', trust: 'high' },
                { name: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥', url: 'https://www.nso.go.th', trust: 'high' }
            ];
        }
        
        /**
         * Show Progress
         */
        showProgress() {
            const formContainer = document.querySelector('.research-form-container');
            const progressContainer = document.getElementById('researchProgress');
            
            if (formContainer) formContainer.style.display = 'none';
            if (progressContainer) progressContainer.style.display = 'block';
            
            // Reset progress
            this.updateProgress(0, '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢...');
            this.updateProgressSteps(1);
            
            console.log('üìä Showing research progress');
        }
        
        /**
         * Hide Progress
         */
        hideProgress() {
            const formContainer = document.querySelector('.research-form-container');
            const progressContainer = document.getElementById('researchProgress');
            
            if (formContainer) formContainer.style.display = 'block';
            if (progressContainer) progressContainer.style.display = 'none';
        }
        
        /**
         * Simulate Progress
         */
        async simulateProgress(steps) {
            for (let i = 0; i < steps.length; i++) {
                const step = steps[i];
                
                this.updateProgressSteps(step.step);
                this.updateProgress((i + 1) * 33, step.text);
                
                // Add sources gradually
                if (step.step === 1) {
                    await this.addMockSources();
                }
                
                await this.delay(step.duration);
            }
            
            this.updateProgress(100, '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!');
            await this.delay(500);
        }
        
        /**
         * Update Progress
         */
        updateProgress(percent, text) {
            const progressFill = document.getElementById('progressFill');
            const progressText = document.getElementById('progressText');
            
            if (progressFill) {
                progressFill.style.width = `${Math.min(100, Math.max(0, percent))}%`;
            }
            
            if (progressText) {
                progressText.textContent = text || 'Processing...';
            }
        }
        
        /**
         * Update Progress Steps
         */
        updateProgressSteps(activeStep) {
            const steps = document.querySelectorAll('.progress-steps .step');
            steps.forEach((step, index) => {
                if (index + 1 <= activeStep) {
                    step.classList.add('active');
                } else {
                    step.classList.remove('active');
                }
            });
        }
        
        /**
         * Add Mock Sources
         */
        async addMockSources() {
            const sourcesList = document.getElementById('sourcesList');
            if (!sourcesList) return;
            
            const sources = this.generateMockSources();
            
            for (const source of sources) {
                const sourceItem = document.createElement('div');
                sourceItem.className = 'source-item';
                sourceItem.innerHTML = `
                    <span class="source-name">${source.name}</span>
                    <span class="trust-badge trust-${source.trust}">
                        ${source.trust === 'high' ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á' : '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'}
                    </span>
                `;
                sourcesList.appendChild(sourceItem);
                
                await this.delay(200);
            }
        }
        
        /**
         * Show Results
         */
        showResults() {
            const progressContainer = document.getElementById('researchProgress');
            const resultsContainer = document.getElementById('researchResults');
            
            if (progressContainer) progressContainer.style.display = 'none';
            if (resultsContainer) {
                resultsContainer.style.display = 'block';
                this.populateResults();
            }
            
            // Scroll to results smoothly
            resultsContainer?.scrollIntoView({ behavior: 'smooth', block: 'start' });
            
            // Show success notification
            this.showNotification('üéâ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå! (DEMO)', 'success');
            
            console.log('üìä Showing research results (DEMO)');
        }
        
        /**
         * Populate Results
         */
        populateResults() {
            if (!this.lastResult) return;
            
            // Update header
            const titleEl = document.getElementById('resultsTitle');
            const costEl = document.getElementById('resultsCost');
            const durationEl = document.getElementById('resultsDuration');
            const modelEl = document.getElementById('resultsModel');
            
            if (titleEl) titleEl.textContent = `‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢: ${this.lastResult.query.substring(0, 50)}... (DEMO)`;
            if (costEl) costEl.textContent = `‡πÉ‡∏ä‡πâ ${this.lastResult.cost} credits`;
            if (durationEl) durationEl.textContent = `‡πÄ‡∏ß‡∏•‡∏≤ ${this.lastResult.duration}`;
            if (modelEl) modelEl.textContent = this.lastResult.model;
            
            // Update content
            const contentEl = document.getElementById('resultsText');
            if (contentEl) {
                contentEl.innerHTML = this.formatResultContent(this.lastResult.content);
            }
            
            // Update sources
            const sourcesEl = document.getElementById('resultsSources');
            if (sourcesEl && this.lastResult.sources) {
                sourcesEl.innerHTML = this.lastResult.sources.map(source => `
                    <div class="source-card">
                        <div class="source-title">${source.name}</div>
                        <div class="source-url">${source.url}</div>
                    </div>
                `).join('');
            }
        }
        
        /**
         * Format Result Content
         */
        formatResultContent(content) {
            // Convert markdown-like syntax to HTML
            return content
                .replace(/^# (.+)$/gm, '<h1>$1</h1>')
                .replace(/^## (.+)$/gm, '<h2>$1</h2>')
                .replace(/^### (.+)$/gm, '<h3>$1</h3>')
                .replace(/^\*\*(.+)\*\*$/gm, '<strong>$1</strong>')
                .replace(/^\*\*(.+)\*\*:/gm, '<strong>$1:</strong>')
                .replace(/^(\d+)\. \*\*(.+)\*\* - (.+)$/gm, '<li><strong>$2</strong> - $3</li>')
                .replace(/^- (.+)$/gm, '<li>$1</li>')
                .replace(/\n\n/g, '</p><p>')
                .replace(/^(.+)$/gm, '<p>$1</p>')
                .replace(/<p><h/g, '<h')
                .replace(/<\/h([1-6])><\/p>/g, '</h$1>')
                .replace(/<p><li>/g, '<ul><li>')
                .replace(/<\/li><\/p>/g, '</li></ul>');
        }
        
        /**
         * New Research
         */
        newResearch() {
            // Reset form
            const formContainer = document.querySelector('.research-form-container');
            const progressContainer = document.getElementById('researchProgress');
            const resultsContainer = document.getElementById('researchResults');
            
            if (formContainer) formContainer.style.display = 'block';
            if (progressContainer) progressContainer.style.display = 'none';
            if (resultsContainer) resultsContainer.style.display = 'none';
            
            // Clear query
            const queryInput = document.getElementById('researchQuery');
            if (queryInput) {
                queryInput.value = '';
                queryInput.focus();
            }
            
            // Reset state
            this.currentQuery = '';
            this.lastResult = null;
            this.isProcessing = false;
            
            this.showNotification('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÉ‡∏´‡∏°‡πà', 'info');
        }
        
        /**
         * Cancel Research
         */
        cancelResearch() {
            this.isProcessing = false;
            this.hideProgress();
            this.showNotification('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢', 'warning');
        }
        
        /**
         * Export Functions (DEMO)
         */
        exportResults() {
            this.showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢... (DEMO)', 'info');
            
            setTimeout(() => {
                this.showNotification('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (DEMO)', 'success');
            }, 2000);
        }
        
        shareWithTeam() {
            this.showNotification('‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (DEMO)', 'success');
        }
        
        /**
         * Event Handlers
         */
        attachEventHandlers() {
            // Start research button
            const startBtn = document.getElementById('startResearchBtn');
            if (startBtn) {
                startBtn.addEventListener('click', () => this.startResearch());
            }
            
            // Character count for query input
            const queryInput = document.getElementById('researchQuery');
            if (queryInput) {
                queryInput.addEventListener('input', (e) => {
                    const charCount = document.querySelector('.char-count');
                    if (charCount) {
                        charCount.textContent = `${e.target.value.length}/10,000`;
                    }
                });
                
                // Enter key to search
                queryInput.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
                        e.preventDefault();
                        this.startResearch();
                    }
                });
            }
            
            // AI Model selection
            document.addEventListener('click', (e) => {
                if (e.target.closest('.model-option')) {
                    const option = e.target.closest('.model-option');
                    const model = option.getAttribute('data-model');
                    if (model) {
                        this.selectAIModel(model);
                    }
                }
            });
            
            console.log('üîó Event handlers attached');
        }
        
        bindEvents() {
            // Global keyboard shortcuts for AI Research
            document.addEventListener('keydown', (e) => {
                // Ctrl+R for new research (when in AI Research)
                if ((e.ctrlKey || e.metaKey) && e.key === 'r' && this.container) {
                    e.preventDefault();
                    this.newResearch();
                }
            });
        }
        
        setupEventListeners() {
            console.log('üéß Event listeners setup completed');
        }
        
        updateUI() {
            this.updateCostEstimate();
            this.updateModelSelection();
            console.log('üé® UI updated');
        }
        
        updateCredits(cost) {
            const creditsElement = document.getElementById('userCredits');
            if (creditsElement) {
                const currentCredits = parseInt(creditsElement.textContent.replace(',', ''));
                const newCredits = Math.max(0, currentCredits - cost);
                creditsElement.textContent = newCredits.toLocaleString();
            }
            
            // Also update header credits if exists
            const headerCredits = document.getElementById('creditsCount');
            if (headerCredits) {
                const currentCredits = parseInt(headerCredits.textContent.replace(',', ''));
                const newCredits = Math.max(0, currentCredits - cost);
                headerCredits.textContent = newCredits.toLocaleString();
            }
        }
        
        /**
         * Utility Functions
         */
        delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        
        showNotification(message, type = 'info') {
            if (window.FlowWork && window.FlowWork.showNotification) {
                window.FlowWork.showNotification(message, type);
            } else {
                console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
            }
        }
        
        getErrorTemplate(error) {
            return `
                <div style="text-align: center; padding: 60px 20px;">
                    <div style="font-size: 64px; margin-bottom: 24px;">‚ö†Ô∏è</div>
                    <h2 style="font-size: 28px; font-weight: 700; color: var(--gray-900); margin-bottom: 8px;">
                        AI Research Module Error
                    </h2>
                    <p style="color: var(--gray-600); margin: 16px 0 32px; font-size: 16px;">
                        ${error}
                    </p>
                    <button onclick="window.location.reload()" style="background: var(--primary); color: white; padding: 12px 24px; border: none; border-radius: 8px; font-weight: 500; cursor: pointer;">
                        <i class="fas fa-refresh" style="margin-right: 8px;"></i>‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
                    </button>
                </div>
            `;
        }
        
        destroy() {
            this.initialized = false;
            this.container = null;
            this.currentQuery = '';
            this.lastResult = null;
            this.isProcessing = false;
            
            console.log('üß† AI Research Module destroyed');
        }
    }
    
    // ‚úÖ Create single instance with conflict prevention
    if (!window.AIResearch) {
        window.AIResearch = new AIResearchModuleCore();
        console.log('‚úÖ AI Research instance created (FIXED)');
    } else {
        console.log('‚ÑπÔ∏è AI Research instance already exists, using existing one');
    }
    
    // ‚úÖ Alternative naming for compatibility (without conflicts)
    if (!window.Airesearch) {
        window.Airesearch = window.AIResearch;
    }
    
    // ‚úÖ Module Registration with FlowWork System
    if (typeof window.FlowWork !== 'undefined') {
        window.FlowWork.modules = window.FlowWork.modules || {};
        window.FlowWork.modules['ai-research'] = window.AIResearch;
        console.log('‚úÖ AI Research registered with FlowWork (FIXED)');
    }
    
    // ‚úÖ Signal module ready
    if (typeof window.dispatchEvent === 'function') {
        window.dispatchEvent(new CustomEvent('aiResearchReady', { 
            detail: { 
                name: 'ai-research', 
                instance: window.AIResearch 
            } 
        }));
        
        window.dispatchEvent(new CustomEvent('moduleReady', { 
            detail: { 
                name: 'ai-research', 
                instance: window.AIResearch 
            } 
        }));
    }
    
    // ‚úÖ Auto-initialization
    document.addEventListener('DOMContentLoaded', () => {
        console.log('üß† DOM loaded, initializing AI Research (FIXED)...');
        if (window.AIResearch && typeof window.AIResearch.init === 'function') {
            window.AIResearch.init();
        }
    });
    
    console.log('üéØ AI Research Module loaded successfully! (v1.0.4 - NAMING CONFLICTS FIXED)');
    console.log('üìã Features: Full Interface ‚úÖ | Enhanced Demo ‚úÖ | Error Handling ‚úÖ | FlowWork Integration ‚úÖ | No Conflicts ‚úÖ');
    
 })();